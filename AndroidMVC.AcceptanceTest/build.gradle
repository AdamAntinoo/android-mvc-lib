// - P L U G I N S
apply plugin: 'com.android.application'
apply plugin: 'project-report'
apply plugin: 'jacoco'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "org.dimensinfin.android.mvc.acceptance"
        testApplicationId "org.dimensinfin.android.mvc.acceptance.test"
        testInstrumentationRunner "org.dimensinfin.android.mvc.acceptance.test.MVCAndroidJUnitRunner"
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 30
        versionName "4.4.0"
        project.archivesBaseName = "MVCAcceptanceTests-$versionName"
        project.version = android.defaultConfig.versionName
    }
    buildTypes {
        release {
            signingConfig debug.signingConfig
            debuggable false
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            resValue "string", "appname", "AndroidMVC"
            resValue "string", "appversion", android.defaultConfig.versionName
//            resValue "string", "appversionname", "NeoCom" + android.defaultConfig.versionName
//            resValue "string", "appversionnumber", "\"" + android.defaultConfig.versionCode + "\""
        }
        debug {
            initWith(release)
            debuggable true
            shrinkResources false
            minifyEnabled false
            useProguard false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        animationsDisabled true
    }

    packagingOptions {
        exclude 'LICENSE.txt'
    }
}
ext {
    cucumberJavaVersion = '4.3.0'
}
dependencies {
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'me.relex:circleindicator:2.1.0'
    implementation 'org.dimensinfin:CoreBase.core:3.0.1'
    implementation project(':AndroidMVC')

    implementation 'org.slf4j:slf4j-android:1.7.25'
//    implementation 'joda-time:joda-time:2.3'

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestUtil 'androidx.test:orchestrator:1.1.1'

    androidTestImplementation "io.cucumber:cucumber-android:$cucumberJavaVersion"
    androidTestImplementation "io.cucumber:cucumber-picocontainer:$cucumberJavaVersion"
}
//dependencies {
//    androidTestImplementation("io.cucumber:gherkin:5.1.0") {
//        exclude group: "io.cucumber", module: "gherkin-jvm-deps"
//    }
//    androidTestImplementation files('libs/cucumber-core-4.3.0.jar')
//    androidTestImplementation("io.cucumber:cucumber-android:$cucumberJavaVersion") {
//        exclude group: 'io.cucumber', module: 'cucumber-core'
//    }
//    androidTestImplementation("io.cucumber:cucumber-picocontainer:$cucumberJavaVersion") {
//        exclude group: 'io.cucumber', module: 'cucumber-core'
//    }
//}
// - TASKS
// ==================================================================
// Custom tasks
// ==================================================================


//task runInstrumentationTests {
//    group "verification"
//    mustRunAfter "deleteExistingCucumberReports"
//    dependsOn "deleteExistingCucumberReports"
//    finalizedBy "downloadCucumberReports"
//}

//spoon {
//    debug = true
//    //this is faster but can be set to false
//    singleInstrumentationCall = true
//    grantAll = true
//    shard = true
//}


/*
 * Downloads all Cucumber reports from the connected device.
 */
task downloadCucumberReports {
    group "Verification"
    description "Downloads the rich Cucumber report files (HTML, XML, JSON) from the connected device"

    doLast {
        def deviceSourcePath = getCucumberDevicePath()
        def localReportPath = new File(buildDir, "reports/cucumber")
        if (!localReportPath.exists()) {
            localReportPath.mkdirs()
        }
        if (!localReportPath.exists()) {
            throw new GradleException("Could not create $localReportPath")
        }
        def adb = getAdbPath()
        def files = getCucumberReportFileNames()
        files.each { fileName ->
            exec {
                commandLine adb, 'pull', "$deviceSourcePath/$fileName", localReportPath
            }
        }
    }
}

/**
 * Deletes existing Cucumber reports on the device.
 */
task deleteExistingCucumberReports {
    group "Verification"
    description "Removes the rich Cucumber report files (HTML, XML, JSON) from the connected device"
    doLast {
        def deviceSourcePath = getCucumberDevicePath()
        def files = getCucumberReportFileNames()
        files.each { fileName ->
            def deviceFileName = deviceSourcePath + '/' + fileName
            def output2 = executeAdb('if [ -d "' + deviceFileName + '" ]; then rm -r "' + deviceFileName + '"; else rm -r "' + deviceFileName + '" ; fi')
            println output2
        }
    }
}

/**
 * Sets the required permissions for Cucumber to write on the internal storage.
 */
task grantPermissions(dependsOn: 'installDebug') {
    doLast {
        def adb = getAdbPath()
        // We only set the permissions for the main application
        def mainPackageName = android.defaultConfig.applicationId
        def readPermission = "android.permission.READ_EXTERNAL_STORAGE"
        def writePermission = "android.permission.WRITE_EXTERNAL_STORAGE"
        exec { commandLine adb, 'shell', 'pm', 'grant', mainPackageName, readPermission }
        exec { commandLine adb, 'shell', 'pm', 'grant', mainPackageName, writePermission }
    }
}


// ==================================================================
// Utility methods
// ==================================================================

/**
 * Utility method to get the full ADB path
 * @return the absolute ADB path
 */
String getAdbPath() {
    def adb = android.getAdbExecutable().toString()
    if (adb.isEmpty()) {
        throw new GradleException("Could not detect adb path")
    }
    return adb
}

/**
 * Sometime adb returns '\r' character multiple times.
 * @param s the original string returned by adb
 * @return the fixed string without '\r'
 */
static def fixAdbOutput(String s) {
    return s.replaceAll("[\r\n]+", "\n").trim()
}

/**
 * Runs the adb tool
 * @param program the program which is executed on the connected device
 * @return the output of the adb tool
 */
def executeAdb(String program) {
    def process = new ProcessBuilder(getAdbPath(), "shell", program).redirectErrorStream(true).start()
    String text = new BufferedReader(new InputStreamReader(process.inputStream)).text
    return fixAdbOutput(text)
}

/**
 * The path which is used to store the Cucumber files.
 * @return
 */
def getCucumberDevicePath() {
    return 'sdcard/Android/data/org.dimensinfin.android.mvc/files/reports'
}

/**
 * @return the known Cucumber report files/directories
 */
static def getCucumberReportFileNames() {
    return ['cucumber.json', 'cucumber.xml', 'cucumber.html']
}
