// - G R A D L E - M E T R I C S
apply plugin: 'checkstyle'
apply plugin: 'pmd'

checkstyle {
    toolVersion = '8.1' // optionally specify tool version
}

pmd {
    toolVersion = '5.8.1' // optionally specify tool version
}

tasks.withType(Checkstyle) {
    ignoreFailures = true
    // REQUIRED because the plugin will report only up to the point the first issue if this is not set
    showViolations = false

    reports {
        xml.enabled = true  // REQUIRED the plugin parses xml reports so this is essential
        html.enabled = true
        html.stylesheet = resources.text.fromFile('config/xsl/checkstyle-custom.xsl')
    }

    include '**/*.java'
}

tasks.withType(Pmd) {
    ignoreFailures = true
    // REQUIRED because the plugin will report only up to the point the first issue if this is not set

    reports {
        xml.enabled = true  // REQUIRED the plugin parses xml reports so this is essential
    }

    include '**/*.java'
}

// - A N D R O I D
apply plugin: 'com.android.library'
apply plugin: 'project-report'
apply plugin: 'maven'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 31
        versionName "4.1.0"
        project.archivesBaseName = "AndroidMVC"
        project.version = android.defaultConfig.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        debug {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "bool", "CACHE_MVC_VIEWS_ON_CONTROLLER", "false"
        }
        release {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "bool", "CACHE_MVC_VIEWS_ON_CONTROLLER", "true"
        }
    }
    sourceSets {
        main {
            res.srcDirs += 'src/main/res-ui'
            res.srcDirs += 'src/main/res-dynamic'
        }
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
        quiet true
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    libraryVariants.all { variant ->
        variant.outputs.all { output ->
            if (outputFile != null && outputFileName.endsWith('.aar')) {
                outputFileName = "${archivesBaseName}-${version}.aar"
            }
        }
    }
}

// - M A V E N   P U B L I S H   I N F O
group = 'org.dimensinfin'
version = project.version
//ext {
//    //Specify your maven repository url here
//    repositoryUrl = 'ftp://your.maven.repository.com/maven2'
//    //Or you can use 'file:\\\\C:\\Temp' or 'maven-temp' for a local maven repository
//}
uploadArchives {
    repositories {
//        mavenDeployer {
//            configuration = configurations.deployerJars
//            repository(url: repositoryUrl) {
//                //if your repository needs authentication
//                authentication(userName: "username", password: "password")
//            }
//        }
        mavenLocal()
    }
}

// - B U I L D   T A S K S
task javadoc(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    destinationDir = file("../javadoc/")
    failOnError false
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives javadocJar
}

//Upload android library to maven with javadoc and android sources
configurations {
    deployerJars
}

// - A N D R O I D    S U P P O R T
dependencies {
    compileOnly 'androidx.fragment:fragment:1.0.0'
}
// - L I B R A R Y   D E P E N D E N C I E S
dependencies {
    compileOnly 'org.slf4j:slf4j-android:1.7.25'
    implementation 'me.relex:circleindicator:2.1.0'
    implementation 'joda-time:joda-time:2.3'
    implementation 'org.apache.commons:commons-lang3:3.7'
}
// - T E S T I N G
dependencies {
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.slf4j:slf4j-simple:1.7.25'
    testImplementation 'joda-time:joda-time:2.9.9'
    testImplementation 'org.mockito:mockito-core:2.23.4'
}

// - A N D R O I D   T E S T I N G
dependencies {
    compileOnly 'androidx.fragment:fragment:1.0.0'
    androidTestImplementation 'org.mockito:mockito-core:2.23.4'
    androidTestImplementation 'androidx.test:runner:1.1.1'
    androidTestImplementation 'androidx.test:rules:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
}
