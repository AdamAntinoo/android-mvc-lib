apply plugin: 'com.android.application'
apply plugin: 'project-report'

android {
    compileSdkVersion 28
    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 27
        versionCode 30
        versionName "4.0.0"
        project.archivesBaseName = "DemoAndroidMVC-$versionName"
        project.version = android.defaultConfig.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
                includeCompileClasspath = true
            }
        }
    }
    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            resValue "string", "appname", "AndroidMVC"
            resValue "string", "appversion", "v" + android.defaultConfig.versionName
            resValue "string", "appversionname", "NeoCom" + android.defaultConfig.versionName
            resValue "string", "appversionnumber", "\"" + android.defaultConfig.versionCode + "\""
        }
        release {
            signingConfig debug.signingConfig
            debuggable false
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            resValue "string", "appname", "AndroidMVC"
            resValue "string", "appversion", "v" + android.defaultConfig.versionName
            resValue "string", "appversionname", "NeoCom" + android.defaultConfig.versionName
            resValue "string", "appversionnumber", "\"" + android.defaultConfig.versionCode + "\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
        quiet true
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
    }
}
repositories {
    jcenter()
    google()
}
ext {
    slf4j = '1.7.26'
}
dependencies {
    // A N D R O I D    S U P P O R T
//    implementation 'com.android.support:support-fragment:28.0.0'
    implementation 'androidx.fragment:fragment:1.0.0'

    // P R O J E C T    D E P E N D E N C I E S
//    implementation 'me.relex:circleindicator:2.1.0'
    implementation 'org.dimensinfin:CoreBase.core:3.0.1'
    implementation project(path: ':AndroidMVC')

    // L O C A L    L I B R A R I E S
//    implementation files('libs/viewpagerindicator-release.aar')

    // M O D U L E    D E P E N D E N C I E S
    implementation 'org.slf4j:slf4j-android:1.7.25'
    implementation 'joda-time:joda-time:2.3'
    implementation 'org.apache.commons:commons-lang3:3.7'
    implementation 'com.squareup.dagger:dagger:1.2.2'
    annotationProcessor 'com.squareup.dagger:dagger-compiler:1.2.2'
}
// - T E S T I N G
dependencies {
    testImplementation 'androidx.annotation:annotation:1.1.0'
    testImplementation 'androidx.arch.core:core-testing:2.0.1'
    testImplementation 'androidx.fragment:fragment:1.0.0'
    testImplementation 'junit:junit:4.12'
    testImplementation "org.slf4j:slf4j-simple:$slf4j"
    testImplementation 'joda-time:joda-time:2.9.9'
    testImplementation 'com.openpojo:openpojo:0.8.12'
    testImplementation 'org.mockito:mockito-core:2.23.4'
    testImplementation 'com.squareup.okhttp3:mockwebserver:3.11.0'
//    testImplementation "org.robolectric:robolectric:4.3-alpha-2"
}

// - A N D R O I D   T E S T I N G
dependencies {
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.2.0'

    androidTestImplementation 'androidx.fragment:fragment:1.0.0'

    androidTestImplementation 'org.mockito:mockito-core:2.23.4'
    androidTestImplementation 'org.mockito:mockito-android:2.23.0'
//    androidTestImplementation('com.github.tmurakami:dexopener:1.0.2') {
//        exclude group: 'com.android.support.test', module: 'runner'
//    }
}

dependencies {
    def room_version = "2.1.0-alpha04"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version" // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
//    implementation "androidx.room:room-ktx:$room_version"

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:$room_version"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:$room_version"

    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"
}
// - L I F E C Y C L E
dependencies {
    def lifecycle_version = "2.0.0"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"
    // alternatively - just ViewModel
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    // For Kotlin use lifecycle-viewmodel-ktx
    // alternatively - just LiveData
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    // alternatively - Lifecycles only (no ViewModel or LiveData). Some UI
    //     AndroidX libraries use this lightweight import for Lifecycle
    implementation "androidx.lifecycle:lifecycle-runtime:$lifecycle_version"

//    annotationProcessor "androidx.lifecycle:lifecycle-compiler:$lifecycle_version"
    // For Kotlin use kapt instead of annotationProcessor
    // alternately - if using Java8, use the following instead of lifecycle-compiler
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"

    // optional - ReactiveStreams support for LiveData
    implementation "androidx.lifecycle:lifecycle-reactivestreams:$lifecycle_version"
    // For Kotlin use lifecycle-reactivestreams-ktx

    // optional - Test helpers for LiveData
    testImplementation "androidx.arch.core:core-testing:$lifecycle_version"
}
// - P A G I N G
dependencies {
    def paging_version = "2.1.0"

    implementation "androidx.paging:paging-runtime:$paging_version" // For Kotlin use paging-runtime-ktx

    // alternatively - without Android dependencies for testing
    testImplementation "androidx.paging:paging-common:$paging_version" // For Kotlin use paging-common-ktx

    // optional - RxJava support
    implementation "androidx.paging:paging-rxjava2:$paging_version" // For Kotlin use paging-rxjava2-ktx
}
